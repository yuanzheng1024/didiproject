下载vscode 
装一个中文的插件 chinese 
设置 fontsize
设置代码的自动保存

git：叫版本控制系统，目前是世界上最先进的版本控制系统，没有之一。
    1.0版
    2.0版

主流的版本控制系统主要分两类：
    1，集中式版本控制系统  SVN
    2，分布式版本控制系统  GIT

GIT的历史：大家自己查一下。

集中式版本控制（SVN）系统缺点：
1）中央服务器如果挂了，一切都over。
2）需要联网才能提交代码和拉取代码。
3）是基于文件传输的，速度慢


分布式版本控制系统的优点：
1）有了本地仓库，不需要联网就可以进行代码的管理
2）不需要过多的依赖中央仓库。
3）基于文件流传输的，速度非常快。

github 和 git 不一样：
git：版本控制工具。
github：是一个网站。

使用git的步骤：
1）下载安装git工具。通过git bash打开黑窗口。
2）注册一个github的账号：https://github.com/
3）创建仓库（git init）  会生成一个.git文件夹，这个文件夹就本地仓库。
4）告诉git你是谁，设置用户名和邮箱。(设置成和github上面的用户名和邮箱一样)
    git config user.name yuanfang1024
    git config user.email 1935952410@qq.com

1）把文件从工作区扔到暂存区：git add index.html  /   git add *   /  git add -A 
2）把文件从暂存区扔到历史区，形成一个历史版本：git commit -m "注释"
3）查看当前文件的状态:  git status    如果文件名是红色的，代表还没提交到暂存区。绿色表示还没有把文件提交到历史区。
4）查看本地仓库的历史区都有哪些版本：git log
6）回退一个版本：git reset 版本id

git中的三大区：
    工作区：.git之外的区域叫工作区。
    本地仓库（.git）：
        暂存区 ：
        历史区：

=========================================== 快速再来一遍git的使用流程 
第一步：通过git init创建一个本地仓库。 只有第1次需要设置用户名和密码。
第二步：编写项目，创建了一个index.html文件，完成首页面的开发。
第三步：把工作区中的index.html扔到暂存区，通过git add * 
第四步：把暂存区的内存扔到历史区，通过git commit -m "版本1"

然后就是重复第二步到第四步。

版本的回退：
    git reset --hard/--soft 版本id     表示回退到指定的版本
    git reset --hard/--soft HEAD^     表示回退到上一个版本
    git reset --hard/--soft HEAD^^    表示回退到上上一个版本
    git reset --hard/--soft HEAD^^^   表示回退到上上上一个版本

    假如有三个版本（版本1，版本2，版本3），如果回退到了版本1，但是后悔了，又想回退到版本3，

辅助命令：
    1）git status  查看状态
    2）git log 查看当前历史区都有哪些版本
    3）git reflog 查看之前存储过的所有的版本

设置用户名和密码:
    git config user.name xxx 
    git config user.email xxx@qq.com 

注册一个github的账号  

=========================================== github的基本使用

注册一个github账号。

注册完一个github，都有自己的首页，如：https://github.com/yuanfang1024    https://github.com/用户名

对于github的设置操作：
    更改用户名：在设置中找到Account选项中更改。
    更改密码：在设置中找到Security选项中更改。
    更改绑定邮箱：在设置中找到Emails选项更改。
    更改个人信息与头像：在设置中找到Profile选择更改。

在github上面可以创建很多的远程仓库，需要联网才能向远程仓库去扔代码。在github上面的创建的仓库，都是远程仓库。

如何创建远程仓库：               repository 仓库的意思
    在github中右上角找+号，+号下面找 new repository，填写对应的仓库信息，就可以创建一个远程仓库。

=========================================== 本地仓库与远程仓库的关联 与 取消关联 

现在创建了一个本地仓库，一个远程仓库，此时它们两个还没有关联。如何关联？
首先通过一个命令查看一下，此时本地仓库没有没关联的远程仓库：git remote -v     没有打印出任何的东西表示没有关联任何远程仓库。

关联远程仓库：git remote add origin 远程仓库的地址
    如：git remote add origin https://github.com/yuanfang1024/didiproject.git

取消关联：git remote rm origin

=========================================== 开发项目，使用本地仓库和远程仓库来管理项目

第1步：创建一个文件（index.html），是项目的首页面，一个模块开发完后，先进行本地仓库的管理。
第2步：把工作区的代码提交到暂存区  git add *
第3步：把暂存区的代码提交到历史区，形成版本    git commit -m "xxx"   此时我已经形了一个版本（本地仓库）
第4步：把历史区中的版本推送到远程仓库（推送前必须让本地仓库与远程仓库进行关联）  git push origin master     master表示主分支
第5步：别人也可以向远程仓库中推送别的模块（同步）
第6步：当我又写了一个模块，需要push时，先进行pull，保证你的代码是远程仓库中最新版本。  git pull origin master


辅助命令：  
    git status  查看文件状态 
    git log 查看历史区的版本 

=========================================== 删除远程仓库
在github中，找到你的仓库，在仓库中找到setting，找到删除按钮，可以删除远程仓库

=========================================== 注意细节
1）注册github时，不要使用IE浏览器，统一使用谷歌或火狐浏览器。
2）push 时 现在统一使用https协议。
3）如果创建远程仓库时，给初始化了一个README文件，在本地push时，需要先pull。


=========================================== 创建一个远程仓库，直接把远程仓库克隆下来，当作本地仓库
1）先创建一个远程仓库  yuanfang1024/didiproject
2）直接把远程仓库克隆下来，不需要创建本地仓库了。 git clone 远程仓库地址 
3）开发项目  写代码
4）进行本地仓库的管理  git add *      git commit -m "xxx"
5）把本地仓库的版本推送到远程仓库   git push origin master


克隆下来仓库有什么优点：
1）默认已经和远程仓库关联在一起了
2）不需要再去创建本地仓库了（不需要 git init了）
3）默认把远程仓库中的内容拉取到了本地（本次不需要 git pull了）

组长创建一个远程的仓库，组员把远程地仓库克隆下来，第一个同学都可以进行项目的开发，进行本地仓库的管理，把代码推送到远程仓库。
其它的同学，需要拉取远程仓库的最新代码，再进行开发，开发完后，再推送到远程仓库，别人再拉取... 

=========================================== 码云（类似于github，只是速度比github快一点）

有兴趣的，可以把码云玩一下。

Collaborators

=========================================== 协作开发

在一个远程仓库的设置中有一个Collaborators选项，叫协作开发，

=========================================== git的分支管理 
git的精髓就是分支管理。

默认情况下，有一个master主分支。

一般情况下，在公司里面，大家不会都在同一个master主分支上面进行开发。一般每一个同学都有一个自己的分支，在自己的分支上进行项目的开发。
如一个模块开发完毕，就可以切换到master主分支，把你的分支合并到master主分支上面。

创建一个分支：git branch 分支名。   
    比如说我现在要创建一个testing分支，命令：git branch testing。
    git branch  后面不加分支名，表示列出当前都有哪些分支。
    默认情况下，它并不会切换到testing分支上面。 命令：git checkout testing  此时就切换到了testing分支了。

删除分支：
    git branch -d 分支名   我要删除testing分支。    命令：git branch -d testing  
    如果你要删除一个分支，必须要切换到master分支，才能删除其它的分支。
    git branch -d 分支名  它能删除的是刚创建的，里面没有内容的 或者 合并已经合并到master分支了

    如果一个分支中有内容并且没有合并到master分支，要删除，通过git branch -D 分支名

分支切换会改变工作区的文件，记住：在切换分支之前，先提交一下，形成版本。

合并分支：
    通过git merge 分支名
    只有在master分支上才能合并其它分支。

    =========================================== 模拟真实的应用场景
1）要开发一个项目，首选项目组长会在远程仓库创建一个项目的仓库。在github上面创建一个远程仓库。
2）开发人员把远程仓库克隆下来。 git clone 远程仓库的地址
3）创建一个debug56的分支，并切换到这个分支上 
    git branch debug56  
    git checkout debug56
    上面的两个命名可以使用 git checkout -b debug56
4）愉快去修改56号bug，还没有修复完毕，老板打电话，说有一个严重bug，赶紧搞一下。
5）创建一个hotbug的分支，修复bug，修复OK了
6）回到主分支，把hotbug合并到master分支
7）删除hotbug删除 
8）接着回到debug56分支继续修复56号bug。




工作流：
    开发taobaoPro项目。
    // 第一个程序员，都会创建一个属于自己的分支。
    // 在自己的分支上开展工作。
    》》测试组对你，主分支（一般都是将要发布或线上版本）上面有一个小小的bug，需要解决一下，bug是 56# bug。
    再创建一个分支去修复这个bug。然后，你就创建了一个分支(debug56)，去修改bug.... 
    》》老板打电话，说，主分支上有一个非常严重的bug，你赶紧修改一下。
    再创建一个分支去修改这个严重bug，分支叫（hotbug）。去修改严重的bug...
    当严重的bug修复OK了，把hothub合并到主分支上面。
    然后会到debug56，继续修改之前测试组让你修改的bug的分支上去。


    =========================================== 下午安排
1，分支管理  大家尽量操作一次    如果实在不懂，先不用学
2，本地仓库和远程仓库进行复习，以做项目的角度再一次。模拟项目开发。

=========================================== 模拟项目开发流程
第一步：项目经理（项目组长）创建一个本地仓库。
第二步：项目经理（项目组长）创建一个创建仓库。
第三步：项目经理（项目组长）把本地仓库与远程仓库关联。
第四步：项目经理（项目组长）把本地仓库中的初始文件推送到远程仓库。
第五步：项目组成员 把远程仓库克隆到本地。 https://github.com/yuanfang1024/didiProject.git
    此时，由于我就一个电脑，那我需要重新设置一个user.name和user.email，设置如下：
    先删除：
         git config --global --unset user.name
         git config --global --unset user.email
    再重新设置
         git config --global user.name NiKo1018
         git config --global user.email 17837032819@163.com
第六步：项目经理（项目组长）邀请成员加入项目团队（协作开发）。
    在github中配置，邀请完后，会有一个邀请链接（成员会收到一个邮件）
    邀请链接：https://github.com/yuanfang1024/didiProject/invitations   项目经现把连接发给成员，或者让成员在邮箱中找确认协作的按钮。

第七步：项目组成员进行项目开发，尝试把项目推送到远程仓库。 如果接收了邀请，那么可以推送成功。

第八步：项目经理（项目组长）更新成员提交的内容。  git fetch didi 
    
=========================================== 使用github托管静态网页（把项目发布到线上，让所有人都可以访问）
内容：Hello World~







